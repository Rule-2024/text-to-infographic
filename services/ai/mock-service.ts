import { TextInputForm, GenerationStatus } from "@/lib/types/infographic";

// 存储生成任务的尺寸信息
const generationSizes: Record<string, string> = {};

// Use mock service in MVP stage to avoid actual API calls
export async function generateInfographic(input: TextInputForm): Promise<string> {
  console.log('Mock AI service generating infographic:', input);

  // Generate a unique ID for this generation task
  const generationId = crypto.randomUUID();

  // Store the size information for this generation task
  generationSizes[generationId] = input.size;

  // Simulate processing delay
  await new Promise(resolve => setTimeout(resolve, 3000));

  // Return a mock HTML content as the result
  // In the actual implementation, this will be HTML generated by the AI service
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background-color: #f8f9fa;
      color: #333;
    }
    .infographic-container {
      max-width: ${
        input.size === '750' ? '750px' :
        input.size === '16-9' ? '1920px' :
        input.size === 'a4-l' ? '1123px' : // A4 landscape (297mm × 210mm) at 96dpi
        input.size === 'a4-p' ? '794px' : // A4 portrait (210mm × 297mm) at 96dpi
        '1000px' // Default fallback
      };
      margin: 0 auto;
      padding: 20px;
      background-color: white;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      ${input.size === '16-9' ? 'height: 1080px;' : ''}
      ${input.size === 'a4-l' ? 'height: 794px;' : ''}
      ${input.size === 'a4-p' ? 'height: 1123px;' : ''}
    }
    .header {
      text-align: center;
      padding: 20px;
      background: linear-gradient(135deg, #7B2FF7, #00CFFF);
      color: white;
      border-radius: 8px;
      margin-bottom: 20px;
    }
    .content {
      display: grid;
      grid-template-columns: ${
        input.size === '750' || input.size === 'a4-p' ? '1fr' :
        'repeat(2, 1fr)'
      };
      gap: 20px;
    }
    .section {
      background-color: #f0f4ff;
      border-radius: 8px;
      padding: 15px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    .footer {
      text-align: center;
      margin-top: 20px;
      padding: 10px;
      font-size: 12px;
      color: #666;
    }
  </style>
</head>
<body>
  <div class="infographic-container">
    <div class="header">
      <h1>Mock Infographic: ${input.content.substring(0, 50)}${input.content.length > 50 ? '...' : ''}</h1>
      <p>Processing Mode: ${input.mode === 'full' ? 'Full Processing' : 'Summary Processing'}</p>
    </div>

    <div class="content">
      <div class="section">
        <h2>Key Points</h2>
        <ul>
          <li>This is a mock infographic generated for testing purposes</li>
          <li>It demonstrates the layout and structure of a real infographic</li>
          <li>In a real implementation, this would contain content from your text</li>
        </ul>
      </div>

      <div class="section">
        <h2>Visualization</h2>
        <div style="background-color: #e9ecef; height: 200px; display: flex; align-items: center; justify-content: center; border-radius: 4px;">
          [Visualization Placeholder]
        </div>
      </div>
    </div>

    <div class="footer">
      <p>更多精美信息图请到：texttoinfographic.online</p>
    </div>
  </div>
</body>
</html>
  `;

  // Return the generation ID
  return generationId;
}

// Status check function
export async function checkGenerationStatus(id: string): Promise<GenerationStatus> {
  // Simulate processing progress
  const progress = Math.random() * 100;

  // Randomly determine status
  let status: 'pending' | 'processing' | 'completed' | 'failed';

  // 添加一个非常小概率随机失败的可能性（约0.1%的概率）
  const shouldFail = Math.random() < 0.001;

  if (shouldFail) {
    status = 'failed';
  } else if (progress < 30) {
    status = 'pending';
  } else if (progress < 90) {
    status = 'processing';
  } else {
    status = 'completed';
  }

  // 获取生成任务的尺寸信息（如果没有，默认为'750'）
  const size = generationSizes[id] || '750';

  // 构建返回值，确保包含所有必要的属性
  const result: GenerationStatus = {
    status,
    progress: Math.min(100, Math.round(progress)),
    ...(status === 'completed' ? {
      result: `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background-color: #f8f9fa;
      color: #333;
    }
    .infographic-container {
      max-width: ${
        size === '750' ? '750px' :
        size === '16-9' ? '1920px' :
        size === 'a4-l' ? '1123px' : // A4 landscape (297mm × 210mm) at 96dpi
        size === 'a4-p' ? '794px' : // A4 portrait (210mm × 297mm) at 96dpi
        '1000px' // Default fallback
      };
      margin: 0 auto;
      padding: 20px;
      background-color: white;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      ${size === '16-9' ? 'height: 1080px;' : ''}
      ${size === 'a4-l' ? 'height: 794px;' : ''}
      ${size === 'a4-p' ? 'height: 1123px;' : ''}
    }
    .header {
      text-align: center;
      padding: 20px;
      background: linear-gradient(135deg, #7B2FF7, #00CFFF);
      color: white;
      border-radius: 8px;
      margin-bottom: 20px;
    }
    .content {
      display: grid;
      grid-template-columns: ${
        size === '750' || size === 'a4-p' ? '1fr' :
        'repeat(2, 1fr)'
      };
      gap: 20px;
    }
    .section {
      background-color: #f0f4ff;
      border-radius: 8px;
      padding: 15px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    .footer {
      text-align: center;
      margin-top: 20px;
      padding: 10px;
      font-size: 12px;
      color: #666;
    }
  </style>
</head>
<body>
  <div class="infographic-container">
    <div class="header">
      <h1>Mock Infographic: Status Check</h1>
      <p>Size: ${size} - This infographic was generated from the status check function</p>
    </div>

    <div class="content">
      <div class="section">
        <h2>Key Points</h2>
        <ul>
          <li>This is a mock infographic generated for testing purposes</li>
          <li>It demonstrates the layout and structure of a real infographic</li>
          <li>In a real implementation, this would contain content from your text</li>
        </ul>
      </div>

      <div class="section">
        <h2>Visualization</h2>
        <div style="background-color: #e9ecef; height: 200px; display: flex; align-items: center; justify-content: center; border-radius: 4px;">
          [Visualization Placeholder for ${size} size]
        </div>
      </div>
    </div>

    <div class="footer">
      <p>更多精美信息图请到：texttoinfographic.online</p>
    </div>
  </div>
</body>
</html>
      `
    } : {}),
    ...(status === 'failed' ? {
      error: 'Mock error message for testing'
    } : {})
  };

  return result;
}